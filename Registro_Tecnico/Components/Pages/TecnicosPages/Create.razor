@page "/Tecnico/Create"

@inject TecnicoService tecnicoService
@inject TipoTecnicoService tipoTecnicoService
@inject NavigationManager Navigation
@rendermode InteractiveServer

<PageTitle>Crear T&eacute;cnico</PageTitle>
<EditForm Model="Tecnico" OnValidSubmit="Guardar">
	<Toasts class="p-3" Messages="Mensaje" Placement="ToastsPlacement.TopRight" />
	<DataAnnotationsValidator />
	<div class="card">
		<div class="shadow-lg">
			@*Header*@
			<div class="card-header text-center">
				<div class="bg-secondary rounded text-white">
					<h3><strong>Crear un nuevo T&eacute;cnico</strong></h3>
				</div>
			</div>
			@*Body*@
			<div class="card-body">
				<div class="row">
					@*ID*@
					<div class="col-1">
						<label class="form-label" for="idTecnico"><strong>T&eacute;cnicoId</strong></label>
						<InputNumber class="form-control" id="idTecnico" @bind-Value="Tecnico.TecnicoId" readonly></InputNumber>
					</div>
					@*Nombres*@
					<div class="col-3 ms-5">
						<label class="form-label" for="nombres"><strong>Nombres</strong></label>
						<InputText class="form-control" id="nombre" @bind-Value="Tecnico.Nombres"></InputText>
						<ValidationMessage For="(()=> Tecnico.Nombres)"></ValidationMessage>
					</div>
					@*SueldoHora*@
					<div class="col-3 ms-5">
						<label class="form-label" for="sueldoHora"><strong>SueldoHora</strong></label>
						<InputNumber class="form-control" id="sueldoHora" @bind-Value="Tecnico.SueldoHora"></InputNumber>
						<ValidationMessage For="(()=> Tecnico.SueldoHora)"></ValidationMessage>
					</div>
					@*Tipo Tecnico*@
					<div class="col-3 ms-5">
						<label class="form-label" for="Tipos"><strong>Tipo</strong></label>
						<InputSelect id="Tipos" class="form-select" @bind-Value="Tecnico.TipoId">
							<option value="0" disabled>Selecciona un Tipo</option>
							@foreach (var tipotecnico in TiposTecnicos)
							{
								<option value="@tipotecnico.TipoId">@tipotecnico.Descripcion</option>
							}
						</InputSelect>
						<ValidationMessage For="(()=> Tecnico.TipoId)"/>
					</div>
				</div>
			</div>
			@*Footer*@
			<div class="card-footer">
				<div class="text-center">
					<button type="button" class="btn btn-outline-secondary bi bi-arrow-90deg-left" @onclick="Volver"> Volver</button>
					<button type="submit" class="btn btn-outline-success bi bi-floppy"> Crear</button>
				</div>
			</div>
		</div>
	</div>
</EditForm>

@code {
	public Tecnicos Tecnico { get; set; } = new Tecnicos();
	public List<TiposTecnicos> TiposTecnicos { get; set; }
	List<ToastMessage> Mensaje = new List<ToastMessage>();

	protected override async Task OnInitializedAsync() {
		TiposTecnicos = await tipoTecnicoService.Listar(t => t.TipoId > 0);
	}

	private void MostrarMensaje(ToastType toastType, string mensaje) {
		Mensaje.Add(CreateToastMessage(toastType, mensaje));
	}

	private ToastMessage CreateToastMessage(ToastType toastType, string mensaje)
	=> new ToastMessage {
			Type = toastType,
			Title = "Notificación",
			HelpText = $"{DateTime.Now}",
			Message = mensaje,
		};

	public async Task Guardar() {
		if (await Validar()) {
			MostrarMensaje(ToastType.Warning, $"Ya existe un técnico con este nombre");
			return;
		}

		var crear = await tecnicoService.Guardar(Tecnico);
		if (crear) {
			MostrarMensaje(ToastType.Success, $"El técnico {Tecnico.Nombres} se ha creado correctamente");
			LimpiarPantalla();
		}
		else
			MostrarMensaje(ToastType.Danger, "No se ha podido crear correctamente el tipo de técnico");
	}

	public async Task<bool> Validar() {
		var existe = await tecnicoService.ExisteNombre(Tecnico.TecnicoId, Tecnico.Nombres);
		return existe;
	}

	public void LimpiarPantalla() {
		Tecnico = new Tecnicos();
	}

	public void Volver() {
		Navigation.NavigateTo("Tecnico/Index");
	}
}