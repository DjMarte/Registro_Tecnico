@page "/Tecnico/Edit/{TecnicoId:int}"
@inject TecnicoService tecnicoService
@inject NavigationManager Navigation
@rendermode InteractiveServer

<PageTitle>Modificar T&eacute;cnico</PageTitle>
<EditForm Model="Tecnico" OnValidSubmit="Modificar">
	<Toasts class="p-3" Messages="Mensaje" Placement="ToastsPlacement.TopRight" />
	<DataAnnotationsValidator />
	<div class="card">
		<div class="shadow-lg">
			@*Header*@
			<div class="card-header">
				<div class="text-center">
					<h3><strong>Modificar T&eacute;cnico</strong></h3>
				</div>
			</div>
			@*Body*@
			<div class="card-body">
				<div class="row">
					@*ID*@
					<div class="col-2">
						<label class="form-label" for="idTecnico"><strong>T&eacute;cnicoId</strong></label>
						<InputNumber class="form-control" id="idTecnico" @bind-Value="Tecnico.TecnicoId" readonly></InputNumber>
					</div>
					@*Nombres*@
					<div class="col-4 ms-5">
						<label class="form-label" for="nombres"><strong>Nombres</strong></label>
						<InputText class="form-control" id="nombres" @bind-Value="Tecnico.Nombres"></InputText>
						<ValidationMessage For="(()=> Tecnico.Nombres)"/>
					</div>
					@*SueldoHora*@
					<div class="col-3 ms-5">
						<label class="form-label" for="sueldoHora"><strong>SueldoHora</strong></label>
						<InputNumber class="form-control" id="sueldoHora" @bind-Value="Tecnico.SueldoHora"></InputNumber>
						<ValidationMessage For="(()=> Tecnico.SueldoHora)"/>
					</div>
				</div>
			</div>
			@*Footer*@
			<div class="card-footer">
				<div class="text-center">
					<button type="button" class="btn btn-outline-secondary bi bi-arrow-90deg-left" @onclick="Volver"> Volver</button>
					<button type="submit" class="btn btn-outline-success bi bi-floppy"> Modificar</button>
				</div>
			</div>
		</div>
	</div>
</EditForm>

@code {
	[Parameter]
	public int TecnicoId { get; set; }

	public Tecnicos Tecnico { get; set; } = new Tecnicos();
	List<ToastMessage> Mensaje = new List<ToastMessage>();

	protected override async Task OnInitializedAsync() {
		Tecnico = await tecnicoService.BuscarId(TecnicoId);
	}

	private void MostrarMensaje(ToastType toastType, string mensaje) {
		Mensaje.Add(CreateToastMessage(toastType, mensaje));
	}

	private ToastMessage CreateToastMessage(ToastType toastType, string mensaje)
	=> new ToastMessage {
			Type = toastType,
			Title = "Notificación",
			HelpText = $"{DateTime.Now}",
			Message = mensaje,
		};

	public async Task Modificar() {
		if (await Validar()) {
			MostrarMensaje(ToastType.Warning, $"Ya existe un técnico con este nombre");
			return;
		}

		var modificar = await tecnicoService.Guardar(Tecnico);
		if (modificar) {
			MostrarMensaje(ToastType.Success, $"El técnico se ha modificado correctamente");
			LimpiarPantalla();
		}
		else
			MostrarMensaje(ToastType.Danger, "No se ha podido modificar correctamente el tipo de técnico");
	}

	public async Task<bool> Validar() {

		var existe = await tecnicoService.ExisteNombre(Tecnico.TecnicoId, Tecnico.Nombres);
		return existe;
	}

	public void LimpiarPantalla() {
		Tecnico = new Tecnicos();
	}

	public void Volver() {
		Navigation.NavigateTo("Tecnico/Index");
	}
}